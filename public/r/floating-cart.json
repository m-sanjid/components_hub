{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "floating-cart",
  "type": "registry:component",
  "title": "Floating Cart",
  "description": "A simple floating cart component",
  "files": [
    {
      "path": "registry/default/components/floating-cart/floating-cart.tsx",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence, Variants } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  IconMinus,\n  IconPlus,\n  IconShoppingCart,\n  IconTrash,\n  IconX,\n} from \"@tabler/icons-react\";\n\ntype CartItem = {\n  id: number;\n  name: string;\n  price: number;\n  quantity: number;\n  image: string;\n};\n\ninterface FloatingCartProps {\n  className?: string;\n  items?: CartItem[];\n  onViewCart?: () => void;\n  onCheckout?: () => void;\n}\n\nconst backdropVariants = {\n  hidden: { opacity: 0 },\n  visible: { opacity: 0.4 },\n  exit: { opacity: 0 },\n};\n\nconst drawerVariants: Variants = {\n  hidden: { opacity: 0, scale: 0.9, y: 30 },\n  visible: {\n    opacity: 1,\n    scale: 1,\n    y: 0,\n    transition: { type: \"spring\", stiffness: 260, damping: 20 },\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.95,\n    y: 30,\n    transition: { duration: 0.2 },\n  },\n};\n\nconst itemVariants = {\n  hidden: { opacity: 0, y: 10 },\n  visible: (i: number) => ({\n    opacity: 1,\n    y: 0,\n    transition: { delay: i * 0.05 },\n  }),\n  exit: { opacity: 0, y: -10 },\n};\n\nexport function FloatingCartWidget({\n  className,\n  items = [],\n  onViewCart,\n  onCheckout,\n}: FloatingCartProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [cartItems, setCartItems] = useState<CartItem[]>(items);\n  const cartRef = useRef<HTMLDivElement>(null);\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null);\n\n  const subtotal = cartItems.reduce(\n    (sum, item) => sum + item.price * item.quantity,\n    0,\n  );\n  const itemCount = cartItems.reduce((sum, item) => sum + item.quantity, 0);\n\n  useEffect(() => {\n    const handleClickOutside = (e: MouseEvent) => {\n      if (\n        cartRef.current &&\n        !cartRef.current.contains(e.target as Node) &&\n        isOpen\n      ) {\n        setIsOpen(false);\n      }\n    };\n    const handleEscapeKey = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") setIsOpen(false);\n    };\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    document.addEventListener(\"keydown\", handleEscapeKey);\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n      document.removeEventListener(\"keydown\", handleEscapeKey);\n    };\n  }, [isOpen]);\n\n  const updateQuantity = (id: number, change: number) => {\n    setCartItems((prev) =>\n      prev.map((item) =>\n        item.id === id\n          ? { ...item, quantity: Math.max(1, item.quantity + change) }\n          : item,\n      ),\n    );\n  };\n\n  const removeItem = (id: number) => {\n    setCartItems((prev) => prev.filter((item) => item.id !== id));\n  };\n\n  return (\n    <div\n      className={cn(\"fixed right-16 bottom-16 z-50\", className)}\n      ref={cartRef}\n    >\n      {/* Toggle Button */}\n      <motion.button\n        whileTap={{ scale: 0.9 }}\n        whileHover={{ scale: 1.05 }}\n        onClick={() => setIsOpen((prev) => !prev)}\n        className={`text-secondary relative flex h-14 w-14 items-center justify-center rounded-full transition ${\n          isOpen ? \"pointer-events-none opacity-0\" : \"bg-primary shadow-lg\"\n        }`}\n        aria-label=\"Open cart\"\n      >\n        <IconShoppingCart className=\"h-6 w-6\" />\n        {itemCount > 0 && !isOpen && (\n          <motion.span\n            initial={{ scale: 0 }}\n            animate={{ scale: 1 }}\n            className=\"absolute -top-1 -right-1 flex h-5 w-5 items-center justify-center rounded-full bg-red-500 text-xs font-bold text-white\"\n          >\n            {itemCount}\n          </motion.span>\n        )}\n      </motion.button>\n\n      <AnimatePresence>\n        {isOpen && (\n          <>\n            {/* Backdrop */}\n            <motion.div\n              key=\"backdrop\"\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"exit\"\n              variants={backdropVariants}\n              className=\"fixed inset-0 z-40 bg-black\"\n              onClick={() => setIsOpen(false)}\n            />\n\n            {/* Drawer */}\n            <motion.div\n              key=\"drawer\"\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"exit\"\n              variants={drawerVariants}\n              className=\"bg-secondary absolute right-0 bottom-20 z-50 flex max-h-[75vh] w-80 flex-col overflow-hidden rounded-xl border shadow-xl md:w-96\"\n              role=\"dialog\"\n              aria-modal=\"true\"\n            >\n              {/* Header */}\n              <div className=\"flex items-center justify-between border-b p-4\">\n                <div className=\"text-primary flex items-center gap-2 text-lg font-semibold\">\n                  <IconShoppingCart className=\"h-5 w-5\" />\n                  Your Cart ({itemCount})\n                </div>\n                <motion.button\n                  whileTap={{ rotate: 90, scale: 0.9 }}\n                  onClick={() => setIsOpen(false)}\n                  aria-label=\"Close cart\"\n                  className=\"text-muted-foreground hover:text-primary\"\n                >\n                  <IconX className=\"h-5 w-5\" />\n                </motion.button>\n              </div>\n\n              {/* Items */}\n              <div className=\"flex-1 overflow-y-auto p-4\">\n                {cartItems.length === 0 ? (\n                  <div className=\"text-muted-foreground py-8 text-center\">\n                    Your cart is empty.\n                  </div>\n                ) : (\n                  <ul\n                    onMouseLeave={() => setHoveredIndex(null)}\n                    className=\"space-y-4\"\n                  >\n                    <AnimatePresence>\n                      {cartItems.map((item, i) => (\n                        <motion.li\n                          onMouseEnter={() => setHoveredIndex(i)}\n                          key={item.id}\n                          custom={i}\n                          variants={itemVariants}\n                          initial=\"hidden\"\n                          animate=\"visible\"\n                          exit=\"exit\"\n                          className=\"flex items-center gap-3\"\n                        >\n                          <div\n                            className={cn(\n                              \"relative overflow-hidden rounded-2xl transition-all duration-200 ease-in-out\",\n                              hoveredIndex === i ? \"translate-x-2\" : \"\",\n                            )}\n                          >\n                            <img\n                              src={item.image}\n                              alt={item.name}\n                              className=\"h-16 w-16 rounded object-cover\"\n                            />\n                          </div>\n                          <div\n                            className={\n                              \"relative flex-1 rounded-2xl px-4 py-2 transition-all duration-200 ease-in-out\"\n                            }\n                          >\n                            {hoveredIndex === i && (\n                              <motion.div\n                                layoutId=\"hover-cart-item\"\n                                className=\"bg-primary/10 pointer-events-none absolute inset-0 z-10 rounded-md\"\n                              />\n                            )}\n                            <div className=\"text-primary z-20 font-medium\">\n                              {item.name}\n                            </div>\n                            <div className=\"z-20 mt-1 flex items-center justify-between text-sm\">\n                              <span className=\"text-muted-foreground\">\n                                ${item.price.toFixed(2)}\n                              </span>\n                              <div className=\"z-20 flex items-center overflow-hidden rounded-md border border-neutral-200 dark:border-neutral-700\">\n                                <button\n                                  onClick={() => updateQuantity(item.id, -1)}\n                                  className=\"text-muted-foreground hover:text-primary flex h-6 w-6 items-center justify-center hover:bg-neutral-50 hover:dark:bg-neutral-800\"\n                                  aria-label=\"Decrease\"\n                                >\n                                  <IconMinus className=\"h-3 w-3\" />\n                                </button>\n                                <span className=\"text-muted-foreground px-2\">\n                                  {item.quantity}\n                                </span>\n                                <button\n                                  onClick={() => updateQuantity(item.id, 1)}\n                                  className=\"text-muted-foreground hover:text-primary flex h-6 w-6 items-center justify-center hover:bg-neutral-50 hover:dark:bg-neutral-800\"\n                                  aria-label=\"Increase\"\n                                >\n                                  <IconPlus className=\"h-3 w-3\" />\n                                </button>\n                              </div>\n                            </div>\n                            <div className=\"z-20 mt-2 flex items-center justify-between\">\n                              <span className=\"text-primary font-medium\">\n                                ${(item.price * item.quantity).toFixed(2)}\n                              </span>\n                              <motion.button\n                                whileHover={{ scale: 1.1 }}\n                                whileTap={{ scale: 0.9 }}\n                                onClick={() => removeItem(item.id)}\n                                className=\"text-red-500 hover:text-red-600 dark:hover:text-red-400\"\n                                aria-label=\"Remove item\"\n                              >\n                                <IconTrash className=\"h-4 w-4\" />\n                              </motion.button>\n                            </div>\n                          </div>\n                        </motion.li>\n                      ))}\n                    </AnimatePresence>\n                  </ul>\n                )}\n              </div>\n\n              {/* Footer */}\n              {cartItems.length > 0 && (\n                <div className=\"bg-secondary border-t p-4\">\n                  <div className=\"mb-3 flex justify-between\">\n                    <span className=\"text-muted-foreground\">Subtotal</span>\n                    <span className=\"font-semibold text-neutral-900 dark:text-white\">\n                      ${subtotal.toFixed(2)}\n                    </span>\n                  </div>\n                  <div className=\"flex flex-col gap-2\">\n                    <button\n                      onClick={onViewCart}\n                      className=\"bg-accent rounded-md border border-neutral-300 px-4 py-2 text-center font-medium text-neutral-800 transition hover:bg-neutral-50 dark:border-neutral-600 dark:text-white dark:hover:bg-neutral-600\"\n                    >\n                      View Cart\n                    </button>\n                    <button\n                      onClick={onCheckout}\n                      className=\"bg-primary text-secondary rounded-md px-4 py-2 text-center font-medium transition\"\n                    >\n                      Checkout\n                    </button>\n                  </div>\n                </div>\n              )}\n            </motion.div>\n          </>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}