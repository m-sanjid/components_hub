{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:component",
  "title": "Tabs",
  "description": "A simple tabs component",
  "files": [
    {
      "path": "registry/default/ui/tabs/tabs.tsx",
      "content": "\"use client\";\n\nimport React, { useState, createContext, useContext, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\n\n// ---------------- Tabs Context ----------------\ninterface TabsContextValue {\n  activeTab: string;\n  onValueChange: (value: string) => void;\n  prevIndex: number;\n  currentIndex: number;\n  tabs: string[];\n  orientation: \"horizontal\" | \"vertical\";\n  registerTab: (value: string) => void;\n  tabsId: string;\n}\n\nconst TabsContext = createContext<TabsContextValue | undefined>(undefined);\n\nfunction useTabsContext() {\n  const context = useContext(TabsContext);\n  if (!context) {\n    throw new Error(\"Tabs components must be used within a Tabs component\");\n  }\n  return context;\n}\n\n// ---------------- Tabs Root ----------------\ninterface TabsProps {\n  children: React.ReactNode;\n  defaultValue: string;\n  value?: string;\n  onValueChange?: (value: string) => void;\n  className?: string;\n  orientation?: \"horizontal\" | \"vertical\";\n  id?: string;\n}\n\nexport function Tabs({\n  children,\n  defaultValue,\n  value,\n  onValueChange,\n  className,\n  orientation = \"horizontal\",\n  id,\n}: TabsProps) {\n  const [activeTab, setActiveTab] = useState(value || defaultValue || \"\");\n  const [prevIndex, setPrevIndex] = useState<number>(0);\n  const [tabs, setTabs] = useState<string[]>([]);\n\n  // Generate unique ID for this tabs instance\n  const [tabsId] = useState(\n    () => id || `tabs-${Math.random().toString(36).substr(2, 9)}`,\n  );\n\n  const currentValue = value || activeTab;\n  const currentIndex = tabs.findIndex((tab) => tab === currentValue);\n\n  const handleValueChange = (newValue: string) => {\n    setPrevIndex(currentIndex);\n    if (!value) {\n      setActiveTab(newValue);\n    }\n    onValueChange?.(newValue);\n  };\n\n  const registerTab = (tabValue: string) => {\n    setTabs((prev) => {\n      if (!prev.includes(tabValue)) {\n        return [...prev, tabValue];\n      }\n      return prev;\n    });\n  };\n\n  const contextValue: TabsContextValue = {\n    activeTab: currentValue,\n    onValueChange: handleValueChange,\n    prevIndex,\n    currentIndex,\n    tabs,\n    orientation,\n    registerTab,\n    tabsId,\n  };\n\n  return (\n    <TabsContext.Provider value={contextValue}>\n      <div\n        className={cn(\n          \"w-full\",\n          orientation === \"vertical\" && \"flex gap-3\",\n          className,\n        )}\n      >\n        {children}\n      </div>\n    </TabsContext.Provider>\n  );\n}\n\n// ---------------- TabsList ----------------\ninterface TabsListProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function TabsList({ children, className }: TabsListProps) {\n  const { orientation } = useTabsContext();\n  return (\n    <div\n      className={cn(\n        \"relative mb-4 flex gap-1 rounded-[12px] border bg-neutral-100 p-1 dark:border-neutral-800 dark:bg-neutral-900\",\n        orientation === \"horizontal\" && \"flex-row\",\n        orientation === \"vertical\" && \"w-fit flex-col\",\n        className,\n      )}\n      role=\"tablist\"\n      aria-orientation={orientation}\n    >\n      {children}\n    </div>\n  );\n}\n\n// ---------------- TabsTrigger ----------------\ninterface TabsTriggerProps {\n  children: React.ReactNode;\n  value: string;\n  className?: string;\n  indicatorClassName?: string;\n  disabled?: boolean;\n}\n\nexport function TabsTrigger({\n  children,\n  value,\n  className,\n  indicatorClassName,\n  disabled = false,\n}: TabsTriggerProps) {\n  const { activeTab, onValueChange, tabs, orientation, registerTab } =\n    useTabsContext();\n  const isActive = activeTab === value;\n\n  const tabsId = useTabsContext().tabsId;\n\n  // Register this tab when component mounts\n  useEffect(() => {\n    registerTab(value);\n  }, [value, registerTab]);\n\n  const handleKeyDown = (e: React.KeyboardEvent<HTMLButtonElement>) => {\n    const currentIdx = tabs.findIndex((tab) => tab === activeTab);\n    if (orientation === \"horizontal\") {\n      if (e.key === \"ArrowRight\") {\n        onValueChange(tabs[(currentIdx + 1) % tabs.length]);\n      } else if (e.key === \"ArrowLeft\") {\n        onValueChange(tabs[(currentIdx - 1 + tabs.length) % tabs.length]);\n      }\n    } else {\n      if (e.key === \"ArrowDown\") {\n        onValueChange(tabs[(currentIdx + 1) % tabs.length]);\n      } else if (e.key === \"ArrowUp\") {\n        onValueChange(tabs[(currentIdx - 1 + tabs.length) % tabs.length]);\n      }\n    }\n  };\n\n  return (\n    <button\n      onClick={() => !disabled && onValueChange(value)}\n      onKeyDown={handleKeyDown}\n      role=\"tab\"\n      aria-selected={isActive}\n      aria-controls={`tab-panel-${value}`}\n      id={`tab-${value}`}\n      tabIndex={isActive ? 0 : -1}\n      disabled={disabled}\n      className={cn(\n        \"relative z-10 rounded-[12px] px-2 py-1 text-sm font-medium whitespace-nowrap transition-colors duration-200 focus:outline-none disabled:opacity-50 md:px-4 md:py-2\",\n        isActive\n          ? \"text-black dark:text-white\"\n          : \"text-neutral-500 hover:text-black dark:hover:text-white\",\n        orientation === \"vertical\" && \"w-full text-left\",\n        className,\n      )}\n    >\n      {/* Indicator with layoutId for smooth transitions */}\n      {isActive && (\n        <motion.div\n          layoutId={tabsId + \"-underline\"}\n          className={cn(\n            \"absolute inset-0 z-0 rounded-[8px] bg-white dark:bg-black\",\n            indicatorClassName,\n          )}\n          transition={{\n            type: \"spring\",\n            stiffness: 500,\n            damping: 30,\n            duration: 0.3,\n          }}\n          style={{\n            borderRadius: \"8px\",\n          }}\n        />\n      )}\n      <span className=\"relative z-10 flex items-center gap-2\">{children}</span>\n    </button>\n  );\n}\n\n// ---------------- TabsContent ----------------\ninterface TabsContentProps {\n  children: React.ReactNode;\n  value: string;\n  className?: string;\n  borderClassName?: string;\n  height?: string;\n}\n\nexport function TabsContent({\n  children,\n  value,\n  className,\n  borderClassName,\n  height = \"350px\",\n}: TabsContentProps) {\n  const { activeTab, prevIndex, tabs } = useTabsContext();\n  const isActive = activeTab === value;\n\n  if (!isActive) return null;\n\n  const currentIdx = tabs.findIndex((tab) => tab === activeTab);\n\n  return (\n    <div\n      className={cn(\n        \"relative w-full overflow-auto rounded-[12px] border bg-white dark:border-neutral-800 dark:bg-black\",\n        borderClassName,\n      )}\n    >\n      <AnimatePresence mode=\"popLayout\" initial={false}>\n        <motion.div\n          key={activeTab}\n          id={`tab-panel-${value}`}\n          role=\"tabpanel\"\n          aria-labelledby={`tab-${value}`}\n          initial={{\n            opacity: 0,\n            x: currentIdx > prevIndex ? 50 : -50,\n            scale: 0.98,\n          }}\n          animate={{\n            opacity: 1,\n            x: 0,\n            scale: 1,\n            transition: { type: \"spring\", stiffness: 300, damping: 30 },\n          }}\n          exit={{\n            opacity: 0,\n            x: currentIdx > prevIndex ? -30 : 30,\n            scale: 0.98,\n            transition: { duration: 0.2, ease: \"easeInOut\" },\n          }}\n          className=\"h-full w-full p-1\"\n        >\n          <div\n            className={cn(\n              \"h-full w-full rounded-[8px] border bg-neutral-50 p-2 dark:bg-neutral-900\",\n              className,\n            )}\n            style={{ minHeight: height }}\n          >\n            {children}\n          </div>\n        </motion.div>\n      </AnimatePresence>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}