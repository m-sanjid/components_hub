{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "auth-form",
  "type": "registry:component",
  "title": "Auth Form",
  "description": "A simple auth form component",
  "files": [
    {
      "path": "registry/default/components/auth-form/auth-form.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { motion, AnimatePresence, MotionProps } from \"motion/react\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  IconBrandGithub,\n  IconBrandGoogle,\n  IconBrandX,\n  IconCircleCheckFilled,\n  IconCircleXFilled,\n  IconEye,\n  IconEyeOff,\n  IconLoader2,\n  IconMail,\n} from \"@tabler/icons-react\";\n\n// Context for form state\ninterface AuthFormContextValue {\n  mode: \"login\" | \"signup\";\n  setMode: (mode: \"login\" | \"signup\") => void;\n  isSubmitting: boolean;\n  formData: Record<string, string>;\n  setFormData: React.Dispatch<React.SetStateAction<Record<string, string>>>;\n  errors: Record<string, string | null>;\n  setErrors: React.Dispatch<\n    React.SetStateAction<Record<string, string | null>>\n  >;\n}\n\nconst AuthFormContext = React.createContext<AuthFormContextValue | undefined>(\n  undefined,\n);\n\nconst useAuthForm = () => {\n  const context = React.useContext(AuthFormContext);\n  if (!context) {\n    throw new Error(\"Auth components must be used within an AuthForm\");\n  }\n  return context;\n};\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps & MotionProps>(\n  ({ className, children, ...props }, ref) => (\n    <motion.button\n      ref={ref}\n      className={cn(\n        className,\n        \"flex items-center justify-center gap-2 rounded-md border bg-neutral-50 px-4 py-2 dark:bg-neutral-950\",\n      )}\n      whileTap={{ scale: 0.98 }}\n      transition={{ duration: 0.1 }}\n      {...props}\n    >\n      {children}\n    </motion.button>\n  ),\n);\nButton.displayName = \"Button\";\n\n// AuthForm - Main container\ninterface AuthFormProps {\n  children: React.ReactNode;\n  onSubmit?: (\n    data: Record<string, string>,\n    mode: \"login\" | \"signup\",\n  ) => Promise<void> | void;\n  mode?: \"login\" | \"signup\";\n  className?: string;\n  loading?: boolean;\n}\n\nexport function AuthForm({\n  children,\n  onSubmit,\n  mode = \"login\",\n  className,\n  loading = false,\n}: AuthFormProps) {\n  const [currentMode, setCurrentMode] = React.useState<\"login\" | \"signup\">(\n    mode,\n  );\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const [formData, setFormData] = React.useState<Record<string, string>>({});\n  const [errors, setErrors] = React.useState<Record<string, string | null>>({});\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    const formDataObj = new FormData(e.currentTarget);\n    const values = Object.fromEntries(formDataObj.entries()) as Record<\n      string,\n      string\n    >;\n\n    setIsSubmitting(true);\n    try {\n      await onSubmit?.(values, currentMode);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const contextValue: AuthFormContextValue = {\n    mode: currentMode,\n    setMode: setCurrentMode,\n    isSubmitting: loading || isSubmitting,\n    formData,\n    setFormData,\n    errors,\n    setErrors,\n  };\n\n  return (\n    <AuthFormContext.Provider value={contextValue}>\n      <div className=\"flex min-h-full items-center justify-center px-4 py-12 sm:px-6 lg:px-8\">\n        <motion.div\n          initial={{ opacity: 0, y: 20, scale: 0.95 }}\n          animate={{ opacity: 1, y: 0, scale: 1 }}\n          transition={{ duration: 0.4, ease: [0.4, 0.0, 0.2, 1] }}\n          className={cn(\n            \"w-full max-w-md space-y-6 rounded-xl border bg-white p-6 shadow-lg backdrop-blur-sm dark:bg-neutral-900\",\n            className,\n          )}\n        >\n          <motion.form\n            noValidate\n            onSubmit={handleSubmit}\n            className=\"space-y-4\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ delay: 0.1, staggerChildren: 0.05 }}\n          >\n            {children}\n          </motion.form>\n        </motion.div>\n      </div>\n    </AuthFormContext.Provider>\n  );\n}\n\n// AuthHeader - Title and subtitle\ninterface AuthHeaderProps {\n  title?: { login: string; signup: string };\n  subtitle?: { login?: string; signup?: string };\n  className?: string;\n}\n\nexport function AuthHeader({\n  title = { login: \"Welcome back\", signup: \"Create account\" },\n  subtitle = {\n    login: \"Enter your credentials to access your account\",\n    signup: \"Enter your information to get started\",\n  },\n  className,\n}: AuthHeaderProps) {\n  const { mode } = useAuthForm();\n\n  return (\n    <motion.div\n      className={cn(\"space-y-2 text-center\", className)}\n      initial={{ opacity: 0, y: -10 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3 }}\n    >\n      <motion.h1\n        className=\"text-2xl font-semibold tracking-tight\"\n        animate={{ scale: [1, 1.02, 1] }}\n        transition={{ duration: 0.3 }}\n      >\n        {mode === \"login\" ? title.login : title.signup}\n      </motion.h1>\n\n      <AnimatePresence mode=\"wait\">\n        {subtitle && (\n          <motion.p\n            key={mode}\n            className=\"text-muted-foreground text-sm\"\n            initial={{ opacity: 0, y: 10 }}\n            animate={{ opacity: 1, y: 0 }}\n            exit={{ opacity: 0, y: -10 }}\n            transition={{ duration: 0.2 }}\n          >\n            {mode === \"login\" ? subtitle.login : subtitle.signup}\n          </motion.p>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n}\n\ninterface AuthToggleLinkProps {\n  labels?: { login: string; signup: string };\n  footerText?: {\n    login: string; // e.g., \"Don't have an account?\"\n    signup: string; // e.g., \"Already have an account?\"\n  };\n  className?: string;\n}\n\nexport function AuthToggleLink({\n  labels = { login: \"Sign in\", signup: \"Sign up\" },\n  footerText = {\n    login: \"Don't have an account?\",\n    signup: \"Already have an account?\",\n  },\n  className,\n}: AuthToggleLinkProps) {\n  const { mode, setMode } = useAuthForm();\n\n  return (\n    <motion.div\n      className={cn(\n        \"text-muted-foreground mt-4 text-center text-sm\",\n        className,\n      )}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.25 }}\n    >\n      {mode === \"login\" ? (\n        <span>\n          {footerText.login}{\" \"}\n          <button\n            type=\"button\"\n            onClick={() => setMode(\"signup\")}\n            className=\"text-foreground font-semibold tracking-tight hover:underline\"\n          >\n            {labels.signup}\n          </button>\n        </span>\n      ) : (\n        <span>\n          {footerText.signup}{\" \"}\n          <button\n            type=\"button\"\n            onClick={() => setMode(\"login\")}\n            className=\"text-foreground font-semibold tracking-tight hover:underline\"\n          >\n            {labels.login}\n          </button>\n        </span>\n      )}\n    </motion.div>\n  );\n}\n\n// AuthField - Form field\ninterface AuthFieldProps {\n  name: string;\n  label: string;\n  type?: string;\n  required?: boolean;\n  placeholder?: string;\n  icon?: React.ReactNode;\n  showPasswordToggle?: boolean;\n  className?: string;\n  showOnlyFor?: \"login\" | \"signup\";\n}\n\ninterface AuthFieldProps {\n  name: string;\n  label: string;\n  type?: string;\n  required?: boolean;\n  placeholder?: string;\n  showOnlyFor?: \"login\" | \"signup\";\n  icon?: React.ReactNode;\n  showPasswordToggle?: boolean;\n  className?: string;\n  validate?: (value: string) => string | null; // return error message or null\n}\n\nexport function AuthField({\n  name,\n  label,\n  type = \"text\",\n  required = false,\n  showOnlyFor,\n  placeholder,\n  icon,\n  showPasswordToggle = false,\n  className,\n  validate,\n}: AuthFieldProps) {\n  const [showPassword, setShowPassword] = React.useState(false);\n  const [isFocused, setIsFocused] = React.useState(false);\n  const [value, setValue] = React.useState(\"\");\n  const [error, setError] = React.useState<string | null>(null);\n  const inputId = `field-${name}`;\n  const isPassword = type === \"password\";\n  const actualType = isPassword && showPassword ? \"text\" : type;\n\n  // run validation live\n  React.useEffect(() => {\n    if (!validate) return;\n    if (value.length === 0) {\n      setError(null);\n      return;\n    }\n    setError(validate(value));\n  }, [value, validate]);\n\n  const { mode, setFormData, setErrors } = useAuthForm();\n\n  React.useEffect(() => {\n    setFormData((prev) => ({ ...prev, [name]: value }));\n    setErrors((prev) => ({ ...prev, [name]: error }));\n  }, [value, error, name, setFormData, setErrors]);\n\n  if (showOnlyFor && showOnlyFor !== mode) {\n    return null;\n  }\n\n  if (name === \"email\") {\n    validate = (value) => {\n      if (!value) return \"Email is required\";\n      if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value))\n        return \"Invalid email address\";\n      return null;\n    };\n  }\n  if (validate && name === \"password\") {\n    validate = (value) => {\n      if (!value) return \"Password is required\";\n      if (value.length < 8)\n        return \"Password must be at least 8 characters long\";\n      return null;\n    };\n  }\n  if (validate && name === \"name\") {\n    validate = (value) => {\n      if (!value) return \"Name is required\";\n      if (value.length < 3) return \"Name must be at least 3 characters long\";\n      return null;\n    };\n  }\n\n  return (\n    <motion.div\n      className={cn(\"space-y-2\", className)}\n      initial={{ opacity: 0, y: 10, filter: \"blur(5px)\" }}\n      animate={{ opacity: 1, y: 0, filter: \"blur(0px)\" }}\n      transition={{ duration: 0.2 }}\n    >\n      <label\n        htmlFor={inputId}\n        className={cn(\n          \"flex items-center justify-between text-sm leading-none font-medium transition-colors\",\n          isFocused && \"text-primary\",\n        )}\n      >\n        {label}\n        <AnimatePresence mode=\"wait\">\n          {error === null && value && (\n            <motion.span\n              key=\"valid\"\n              className=\"flex items-center gap-1 text-xs text-green-600\"\n              initial={{ opacity: 0, x: 5 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: -5 }}\n            >\n              <IconCircleCheckFilled className=\"h-3 w-3\" /> Looks good\n            </motion.span>\n          )}\n          {error && (\n            <motion.span\n              key=\"error\"\n              className=\"flex items-center gap-1 text-xs text-red-500\"\n              initial={{ opacity: 0, x: -5 }}\n              animate={{ opacity: 1, x: 0 }}\n              exit={{ opacity: 0, x: 5 }}\n            >\n              <IconCircleXFilled className=\"h-3 w-3\" /> {error}\n            </motion.span>\n          )}\n        </AnimatePresence>\n      </label>\n\n      <div className=\"group relative\">\n        {icon && (\n          <motion.div\n            className={cn(\n              \"text-muted-foreground absolute top-1/2 left-3 -translate-y-1/2\",\n              isFocused && \"text-primary\",\n            )}\n            animate={{ scale: isFocused ? 1.1 : 1 }}\n          >\n            {icon}\n          </motion.div>\n        )}\n\n        <motion.input\n          id={inputId}\n          name={name}\n          type={actualType}\n          required={required}\n          placeholder={placeholder}\n          value={value}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          onChange={(e) => setValue(e.target.value)}\n          className={cn(\n            \"placeholder:text-muted-foreground focus-visible:ring-ring flex h-10 w-full rounded-md bg-neutral-100 px-3 py-2 text-sm transition-all duration-200 focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none dark:bg-neutral-800\",\n            icon && \"pl-10\",\n            isPassword && showPasswordToggle && \"pr-10\",\n            isFocused ? \"border-0 shadow-sm\" : \"border\",\n            error && \"border-red-500\",\n          )}\n          whileFocus={{ scale: 1.01 }}\n        />\n\n        {isPassword && showPasswordToggle && (\n          <button\n            type=\"button\"\n            className=\"absolute top-0 right-0 h-full px-3 py-2 hover:bg-transparent\"\n            onClick={() => setShowPassword(!showPassword)}\n            tabIndex={-1}\n          >\n            {showPassword ? (\n              <IconEyeOff className=\"text-muted-foreground h-4 w-4\" />\n            ) : (\n              <IconEye className=\"text-muted-foreground h-4 w-4\" />\n            )}\n          </button>\n        )}\n      </div>\n    </motion.div>\n  );\n}\n\n// AuthTextArea - Textarea field\ninterface AuthTextAreaProps {\n  name: string;\n  label: string;\n  required?: boolean;\n  placeholder?: string;\n  rows?: number;\n  className?: string;\n  showOnlyFor?: \"login\" | \"signup\";\n}\n\nexport function AuthTextArea({\n  name,\n  label,\n  required = false,\n  placeholder,\n  rows = 4,\n  className,\n  showOnlyFor,\n}: AuthTextAreaProps) {\n  const { mode } = useAuthForm();\n  const [isFocused, setIsFocused] = React.useState(false);\n\n  const inputId = `field-${name}`;\n\n  // Hide field if showOnlyFor is specified and doesn't match current mode\n  if (showOnlyFor && showOnlyFor !== mode) {\n    return null;\n  }\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        className={cn(\"space-y-2\", className)}\n        initial={{ opacity: 0, y: 10 }}\n        animate={{ opacity: 1, y: 0 }}\n        exit={{ opacity: 0, y: -10 }}\n        transition={{ duration: 0.2 }}\n        layout\n      >\n        <label\n          htmlFor={inputId}\n          className={cn(\n            \"text-sm leading-none font-medium transition-colors\",\n            isFocused && \"text-primary\",\n          )}\n        >\n          {label}\n          {required && <span className=\"text-destructive ml-1\">*</span>}\n        </label>\n\n        <motion.textarea\n          id={inputId}\n          name={name}\n          required={required}\n          placeholder={placeholder}\n          rows={rows}\n          onFocus={() => setIsFocused(true)}\n          onBlur={() => setIsFocused(false)}\n          className={cn(\n            \"border-input bg-background ring-offset-background placeholder:text-muted-foreground focus-visible:ring-ring flex min-h-[80px] w-full resize-none rounded-md border px-3 py-2 text-sm transition-all duration-200 focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n            isFocused && \"border-primary shadow-sm\",\n          )}\n          whileFocus={{ scale: 1.01 }}\n        />\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n\n// AuthSocial - Social auth buttons\nconst socialIcons = {\n  github: IconBrandGithub,\n  google: IconBrandGoogle,\n  twitter: IconBrandX,\n  email: IconMail,\n} as const;\n\ninterface AuthSocialProps {\n  provider: string;\n  children: React.ReactNode;\n  icon?: React.ReactNode;\n  onClick?: () => void;\n  className?: string;\n}\n\nexport function AuthSocial({\n  provider,\n  children,\n  icon,\n  onClick,\n  className,\n}: AuthSocialProps) {\n  const IconComponent = socialIcons[provider as keyof typeof socialIcons];\n  const buttonIcon =\n    icon || (IconComponent && <IconComponent className=\"h-4 w-4\" />);\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, scale: 0.95 }}\n      animate={{ opacity: 1, scale: 1 }}\n      transition={{ duration: 0.2 }}\n      whileHover={{ scale: 1.01 }}\n      whileTap={{ scale: 0.99 }}\n    >\n      <Button\n        type=\"button\"\n        onClick={onClick}\n        className={cn(\"h-11 w-full justify-center gap-2\", className)}\n      >\n        <motion.div\n          animate={{ rotate: [0, 5, -5, 0] }}\n          transition={{ duration: 0.3 }}\n        >\n          {buttonIcon}\n        </motion.div>\n        {children}\n      </Button>\n    </motion.div>\n  );\n}\n\n// AuthSeparator - Visual separator\ninterface AuthSeparatorProps {\n  text?: string;\n  className?: string;\n}\n\nexport function AuthSeparator({ text = \"or\", className }: AuthSeparatorProps) {\n  return (\n    <motion.div\n      className={cn(\"relative\", className)}\n      initial={{ opacity: 0, scaleX: 0 }}\n      animate={{ opacity: 1, scaleX: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"absolute inset-0 flex items-center\">\n        <span className=\"w-full border-t\" />\n      </div>\n      <div className=\"relative flex justify-center text-xs uppercase\">\n        <span className=\"bg-background text-muted-foreground px-2\">{text}</span>\n      </div>\n    </motion.div>\n  );\n}\n\n// AuthSubmit - Submit button\ninterface AuthSubmitProps {\n  children?: React.ReactNode;\n  labels?: { login: string; signup: string };\n  className?: string;\n  loadingText?: string;\n}\n\nexport function AuthSubmit({\n  children,\n  labels = { login: \"Sign in\", signup: \"Create account\" },\n  className,\n  loadingText = \"Please wait...\",\n}: AuthSubmitProps) {\n  const { mode, isSubmitting, formData, errors } = useAuthForm();\n\n  const buttonText =\n    children || (mode === \"login\" ? labels.login : labels.signup);\n\n  // Disable if submitting OR errors OR required fields missing\n  const hasErrors = Object.values(errors).some((err) => err !== null);\n  const hasEmptyRequired = [\"email\", \"password\"].some(\n    (field) => !formData[field]?.trim(),\n  );\n  const isDisabled = isSubmitting || hasErrors || hasEmptyRequired;\n\n  return (\n    <motion.div\n      initial={{ opacity: 0, y: 20 }}\n      animate={{ opacity: 1, y: 0 }}\n      transition={{ duration: 0.3, delay: 0.2 }}\n      className=\"pt-2\"\n    >\n      <Button\n        type=\"submit\"\n        disabled={isDisabled}\n        className={cn(\n          \"h-11 w-full text-sm font-medium disabled:cursor-not-allowed disabled:opacity-50\",\n          className,\n        )}\n      >\n        <AnimatePresence mode=\"wait\">\n          {isSubmitting ? (\n            <motion.div\n              key=\"loading\"\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n              className=\"flex items-center gap-2\"\n            >\n              <IconLoader2 className=\"h-4 w-4 animate-spin\" />\n              <span>{loadingText}</span>\n            </motion.div>\n          ) : (\n            <motion.span\n              key=\"label\"\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n            >\n              {buttonText}\n            </motion.span>\n          )}\n        </AnimatePresence>\n      </Button>\n    </motion.div>\n  );\n}\n\n// AuthLink - Link to external pages\ninterface AuthLinkProps {\n  href?: string;\n  onClick?: () => void;\n  children: React.ReactNode;\n  className?: string;\n}\n\nexport function AuthLink({\n  href,\n  onClick,\n  children,\n  className,\n}: AuthLinkProps) {\n  const handleClick = (e: React.MouseEvent) => {\n    if (onClick) {\n      e.preventDefault();\n      onClick();\n    }\n  };\n\n  return (\n    <motion.a\n      href={href}\n      onClick={handleClick}\n      className={cn(\n        \"text-primary hover:text-primary/80 cursor-pointer text-sm transition-colors\",\n        className,\n      )}\n      whileHover={{ scale: 1.05 }}\n      whileTap={{ scale: 0.95 }}\n    >\n      {children}\n    </motion.a>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}