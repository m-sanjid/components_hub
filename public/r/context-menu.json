{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "context-menu",
  "type": "registry:component",
  "title": "Context Menu",
  "description": "A simple context menu component",
  "files": [
    {
      "path": "registry/default/components/context-menu/context-menu.tsx",
      "content": "\"use client\";\n\nimport { useState, useRef, useEffect } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { IconChevronRight } from \"@tabler/icons-react\";\n\nexport interface ContextMenuItem {\n  id: string;\n  label: string;\n  icon?: React.ComponentType<{ className?: string }>;\n  shortcut?: string;\n  disabled?: boolean;\n  onClick?: () => void;\n  submenu?: ContextMenuItem[];\n}\n\ninterface ContextMenuProps {\n  items: ContextMenuItem[];\n  onClose?: () => void;\n  className?: string;\n}\n\nexport function ContextMenu({\n  items,\n  onClose,\n  className = \"\",\n}: ContextMenuProps) {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [activeSubmenu, setActiveSubmenu] = useState<string | null>(null);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        onClose?.();\n      }\n    };\n\n    const handleContextMenu = (event: MouseEvent) => {\n      event.preventDefault();\n      setPosition({ x: event.clientX, y: event.clientY });\n    };\n\n    document.addEventListener(\"click\", handleClickOutside);\n    document.addEventListener(\"contextmenu\", handleContextMenu);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClickOutside);\n      document.removeEventListener(\"contextmenu\", handleContextMenu);\n    };\n  }, [onClose]);\n\n  const handleItemClick = (item: ContextMenuItem) => {\n    if (item.disabled) return;\n    if (item.submenu) {\n      setActiveSubmenu(item.id);\n    } else {\n      item.onClick?.();\n      onClose?.();\n    }\n  };\n\n  const renderSubmenu = (item: ContextMenuItem) => {\n    if (!item.submenu) return null;\n\n    return (\n      <motion.div\n        initial={{ opacity: 0, x: 10 }}\n        animate={{ opacity: 1, x: 0 }}\n        exit={{ opacity: 0, x: 10 }}\n        className=\"absolute top-0 left-full z-50 min-w-[200px] rounded-lg border border-neutral-200 bg-white py-1 shadow-lg dark:border-neutral-700 dark:bg-neutral-900\"\n      >\n        {item.submenu.map((subItem) => (\n          <button\n            key={subItem.id}\n            onClick={() => handleItemClick(subItem)}\n            disabled={subItem.disabled}\n            className={`flex w-full items-center gap-2 px-4 py-2 text-sm ${\n              subItem.disabled\n                ? \"cursor-not-allowed text-neutral-400\"\n                : \"text-neutral-700 hover:bg-neutral-100 dark:text-neutral-300 dark:hover:bg-neutral-800\"\n            }`}\n          >\n            {subItem.icon && (\n              <subItem.icon className=\"h-4 w-4 text-neutral-400\" />\n            )}\n            <span className=\"flex-1 text-left\">{subItem.label}</span>\n            {subItem.shortcut && (\n              <kbd className=\"rounded border border-neutral-200 bg-neutral-100 px-2 py-0.5 text-xs dark:border-neutral-700 dark:bg-neutral-800\">\n                {subItem.shortcut}\n              </kbd>\n            )}\n          </button>\n        ))}\n      </motion.div>\n    );\n  };\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        ref={menuRef}\n        initial={{ opacity: 0, scale: 0.95 }}\n        animate={{ opacity: 1, scale: 1 }}\n        exit={{ opacity: 0, scale: 0.95 }}\n        style={{\n          position: \"fixed\",\n          left: position.x,\n          top: position.y,\n        }}\n        className={`z-50 min-w-[200px] rounded-lg border border-neutral-200 bg-white py-1 shadow-lg dark:border-neutral-700 dark:bg-neutral-900 ${className}`}\n      >\n        {items.map((item) => (\n          <div key={item.id} className=\"relative\">\n            <button\n              onClick={() => handleItemClick(item)}\n              disabled={item.disabled}\n              className={`flex w-full items-center gap-2 px-4 py-2 text-sm ${\n                item.disabled\n                  ? \"cursor-not-allowed text-neutral-400\"\n                  : \"text-neutral-700 hover:bg-neutral-100 dark:text-neutral-300 dark:hover:bg-neutral-800\"\n              }`}\n            >\n              {item.icon && <item.icon className=\"h-4 w-4 text-neutral-400\" />}\n              <span className=\"flex-1 text-left\">{item.label}</span>\n              {item.shortcut && (\n                <kbd className=\"rounded border border-neutral-200 bg-neutral-100 px-2 py-0.5 text-xs dark:border-neutral-700 dark:bg-neutral-800\">\n                  {item.shortcut}\n                </kbd>\n              )}\n              {item.submenu && (\n                <IconChevronRight className=\"h-4 w-4 text-neutral-400\" />\n              )}\n            </button>\n            {activeSubmenu === item.id && renderSubmenu(item)}\n          </div>\n        ))}\n      </motion.div>\n    </AnimatePresence>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}