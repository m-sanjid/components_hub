{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "accordion",
  "type": "registry:component",
  "title": "Accordion",
  "description": "A simple accordion component",
  "files": [
    {
      "path": "registry/default/components/accordion/accordion.tsx",
      "content": "\"use client\";\n\nimport { useState } from \"react\";\nimport { motion, AnimatePresence, Variants } from \"motion/react\";\nimport { ChevronDown } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\nexport interface AccordionProps {\n  id: string;\n  title: string;\n  children: React.ReactNode;\n  isOpen?: boolean;\n  onToggle?: () => void;\n  className?: string;\n}\n\nexport function Accordion({\n  id,\n  title,\n  children,\n  isOpen = false,\n  onToggle,\n  className = \"\",\n}: AccordionProps) {\n  return (\n    <motion.div\n      layout=\"position\"\n      className={cn(\n        \"rounded-xl border border-neutral-200 bg-white shadow-sm dark:border-neutral-800 dark:bg-neutral-900\",\n        className,\n      )}\n      initial={false}\n      transition={{\n        duration: 0.3,\n        type: \"spring\",\n        stiffness: 300,\n        damping: 30,\n      }}\n    >\n      {/* Header */}\n      <motion.button\n        onClick={onToggle}\n        className=\"flex w-full items-center justify-between p-4 text-left\"\n        aria-expanded={isOpen}\n        aria-controls={`accordion-content-${id}`}\n      >\n        <span className=\"text-base font-medium text-neutral-900 dark:text-neutral-100\">\n          {title}\n        </span>\n        <motion.div\n          animate={{ rotate: isOpen ? 180 : 0 }}\n          transition={{ duration: 0.4, type: \"spring\", bounce: 0.2 }}\n          className=\"text-neutral-500 dark:text-neutral-400\"\n        >\n          <ChevronDown className=\"h-5 w-5\" />\n        </motion.div>\n      </motion.button>\n\n      {/* Content */}\n      <AnimatePresence initial={false}>\n        {isOpen && (\n          <motion.div\n            id={`accordion-content-${id}`}\n            key=\"content\"\n            initial=\"collapsed\"\n            animate=\"open\"\n            exit=\"collapsed\"\n            variants={accordionVariants}\n            transition={{\n              duration: 0.4,\n              ease: [0.04, 0.62, 0.23, 0.98],\n              opacity: { duration: 0.25 },\n            }}\n            className=\"overflow-hidden\"\n          >\n            <motion.div\n              variants={staggerChildren}\n              initial=\"hidden\"\n              animate=\"visible\"\n              exit=\"exit\"\n              className=\"px-4 pb-4\"\n            >\n              {Array.isArray(children) ? (\n                children.map((child, i) => (\n                  <motion.div key={i} variants={fadeInUp} className=\"mb-2\">\n                    {child}\n                  </motion.div>\n                ))\n              ) : (\n                <motion.div variants={fadeInUp}>{children}</motion.div>\n              )}\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </motion.div>\n  );\n}\n\nexport interface AccordionGroupProps {\n  items: { id: string; title: string; content: React.ReactNode }[];\n  allowMultiple?: boolean;\n  defaultOpen?: string[]; // array of ids to be open initially\n  className?: string;\n}\n\nexport function AccordionGroup({\n  items,\n  allowMultiple = false,\n  defaultOpen = [],\n  className = \"\",\n}: AccordionGroupProps) {\n  const [openItems, setOpenItems] = useState<string[]>(defaultOpen);\n\n  const toggleItem = (id: string) => {\n    setOpenItems((prev) => {\n      if (allowMultiple) {\n        return prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id];\n      } else {\n        return prev.includes(id) ? [] : [id];\n      }\n    });\n  };\n\n  return (\n    <div className={`space-y-3 ${className}`}>\n      {items.map((item) => (\n        <Accordion\n          key={item.id}\n          id={item.id}\n          title={item.title}\n          isOpen={openItems.includes(item.id)}\n          onToggle={() => toggleItem(item.id)}\n        >\n          {item.content}\n        </Accordion>\n      ))}\n    </div>\n  );\n}\n\nconst accordionVariants: Variants = {\n  open: { opacity: 1, height: \"auto\", marginTop: 0 },\n  collapsed: { opacity: 0, height: 0, marginTop: 0 },\n};\n\nconst staggerChildren: Variants = {\n  visible: { transition: { staggerChildren: 0.07, delayChildren: 0.1 } },\n  hidden: {},\n  exit: { transition: { staggerChildren: 0.05, staggerDirection: -1 } },\n};\n\nconst fadeInUp: Variants = {\n  hidden: { opacity: 0, y: 15, filter: \"blur(6px)\" },\n  visible: {\n    opacity: 1,\n    y: 0,\n    filter: \"blur(0px)\",\n    transition: { duration: 0.3, ease: \"easeOut\" },\n  },\n  exit: {\n    opacity: 0,\n    y: 10,\n    filter: \"blur(6px)\",\n    transition: { duration: 0.2, ease: \"easeIn\" },\n  },\n};\n",
      "type": "registry:component"
    }
  ]
}