{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "feature-tabs",
  "type": "registry:component",
  "title": "Feature Tabs",
  "description": "A simple feature tabs component",
  "registryDependencies": [
    "motion",
    "clsx",
    "tabler-icons-react"
  ],
  "files": [
    {
      "path": "registry/default/components/feature-tabs/feature-tabs.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useRef } from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport clsx from \"clsx\";\n\ninterface Tab {\n  value: string;\n  title: string;\n  description: string;\n  content: React.ReactNode;\n}\n\ninterface FeatureTabsProps {\n  tabs: Tab[];\n  sectionTitle?: string;\n  sectionSubtitle?: string;\n  defaultValue?: string;\n  onValueChange?: (value: string) => void;\n  className?: string;\n  height?: string;\n  autoplay?: boolean;\n  interval?: number;\n}\n\nexport function FeatureTabs({\n  tabs,\n  sectionTitle,\n  sectionSubtitle,\n  defaultValue,\n  onValueChange,\n  className,\n  height = \"min-h-[500px]\",\n  autoplay = true,\n  interval = 5000,\n}: FeatureTabsProps) {\n  const [activeTab, setActiveTab] = useState(defaultValue || tabs[0].value);\n  const [isHovered, setIsHovered] = useState(false);\n  const timerRef = useRef<NodeJS.Timeout | null>(null);\n\n  const currentIndex = tabs.findIndex((t) => t.value === activeTab);\n\n  const handleTabChange = (newValue: string) => {\n    setActiveTab(newValue);\n    onValueChange?.(newValue);\n  };\n\n  const nextTab = () => {\n    const next = (currentIndex + 1) % tabs.length;\n    handleTabChange(tabs[next].value);\n  };\n\n  // autoplay\n  useEffect(() => {\n    if (!autoplay || isHovered) return;\n    timerRef.current = setInterval(() => {\n      nextTab();\n    }, interval);\n    return () => {\n      if (timerRef.current) clearInterval(timerRef.current);\n    };\n  }, [autoplay, isHovered, currentIndex]);\n\n  const activeFeature = tabs.find((t) => t.value === activeTab);\n\n  return (\n    <section\n      className={clsx(\n        \"relative mx-auto my-4 w-full max-w-5xl border bg-gradient-to-b from-neutral-50 to-neutral-100 dark:from-neutral-900 dark:to-black\",\n        className,\n      )}\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      {/* corner line decor */}\n      <div className=\"absolute -top-0 -left-10 h-1 w-10 border-t-[0.2px] border-dashed border-neutral-300 mask-l-from-50% dark:border-neutral-600\"></div>\n      <div className=\"absolute -top-10 left-0 h-10 w-1 border-l-[0.2px] border-dashed border-neutral-300 mask-t-from-50% dark:border-neutral-600\"></div>\n      <div className=\"absolute -right-10 bottom-0 h-1 w-10 border-b-[0.2px] border-dashed border-neutral-300 mask-r-from-50% dark:border-neutral-600\"></div>\n      <div className=\"absolute right-0 -bottom-10 h-10 w-1 border-r-[0.2px] border-dashed border-neutral-300 mask-b-from-50% dark:border-neutral-600\"></div>\n\n      {/* Section Heading - full width */}\n      <div className=\"w-full px-8 pt-8 lg:px-12\">\n        <h2 className=\"text-3xl font-bold tracking-tight text-neutral-900 dark:text-neutral-100\">\n          {sectionTitle ?? \"Powerful Features\"}\n        </h2>\n        <p className=\"mt-2 max-w-2xl text-neutral-600 dark:text-neutral-400\">\n          {sectionSubtitle ??\n            \"Explore the key capabilities designed to make your workflow seamless.\"}\n        </p>\n      </div>\n\n      {/* Grid Layout */}\n      <div className=\"p-4\">\n        <div className=\"grid grid-cols-1 items-stretch gap-8 overflow-hidden border p-4 lg:grid-cols-3\">\n          {/* Sidebar Navigation */}\n          <div className=\"flex flex-col justify-between space-y-6\">\n            <div\n              className=\"flex w-fit flex-row flex-wrap gap-2 bg-black/5 p-1 lg:w-full lg:flex-col lg:gap-4 dark:bg-white/5\"\n              role=\"tablist\"\n            >\n              {tabs.map((tab, i) => (\n                <button\n                  key={tab.value}\n                  onClick={() => handleTabChange(tab.value)}\n                  role=\"tab\"\n                  aria-selected={activeTab === tab.value}\n                  aria-controls={`tab-panel-${tab.value}`}\n                  id={`tab-${tab.value}`}\n                  tabIndex={activeTab === tab.value ? 0 : -1}\n                  className={clsx(\n                    \"relative rounded-md px-3 py-2 text-start text-sm font-medium transition-colors focus:outline-none lg:py-6 lg:text-base\",\n                  )}\n                >\n                  {activeTab === tab.value && (\n                    <motion.div\n                      layoutId=\"active-features\"\n                      className=\"absolute inset-0 bg-neutral-900 dark:bg-neutral-100\"\n                      transition={{\n                        type: \"spring\",\n                        stiffness: 500,\n                        damping: 30,\n                      }}\n                    />\n                  )}\n\n                  <motion.span\n                    layout\n                    className={clsx(\n                      \"relative z-10 ml-1\",\n                      activeTab === tab.value\n                        ? \"text-primary-foreground font-semibold\"\n                        : \"text-muted-foreground\",\n                    )}\n                    animate={\n                      activeTab === tab.value\n                        ? { scale: 1.05, letterSpacing: \"0.02em\" }\n                        : { scale: 1, letterSpacing: \"0em\" }\n                    }\n                    transition={{ type: \"spring\", stiffness: 400, damping: 25 }}\n                  >\n                    <span className=\"relative z-10 font-medium\">{i + 1}. </span>\n                    {tab.value}\n                  </motion.span>\n                </button>\n              ))}\n            </div>\n\n            {/* Active Tab Info */}\n            <div className=\"space-y-2\">\n              <h3 className=\"text-xl font-semibold text-neutral-900 dark:text-neutral-100\">\n                {activeFeature?.title}\n              </h3>\n              <p className=\"text-neutral-600 dark:text-neutral-400\">\n                {activeFeature?.description}\n              </p>\n            </div>\n          </div>\n\n          {/* Feature Preview - full span */}\n          <div\n            className={clsx(\n              \"relative flex w-full items-center justify-center overflow-hidden border bg-white/80 shadow-md lg:col-span-2 dark:border-neutral-800 dark:bg-neutral-950/50\",\n              height,\n            )}\n          >\n            <AnimatePresence mode=\"popLayout\" initial={false}>\n              <motion.div\n                key={activeTab}\n                id={`tab-panel-${activeTab}`}\n                role=\"tabpanel\"\n                aria-labelledby={`tab-${activeTab}`}\n                initial={{\n                  opacity: 0,\n                  y: 30,\n                  filter: \"blur(8px)\",\n                  scale: 0.97,\n                }}\n                animate={{\n                  opacity: 1,\n                  y: 0,\n                  filter: \"blur(0px)\",\n                  scale: 1,\n                  transition: {\n                    type: \"spring\",\n                    stiffness: 250,\n                    damping: 28,\n                  },\n                }}\n                exit={{\n                  opacity: 0,\n                  y: -30,\n                  filter: \"blur(8px)\",\n                  scale: 0.97,\n                  transition: {\n                    duration: 0.25,\n                    ease: \"easeInOut\",\n                  },\n                }}\n                className=\"absolute inset-0 flex items-center justify-center p-6\"\n              >\n                {activeFeature?.content}\n              </motion.div>\n            </AnimatePresence>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}