{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "email-form",
  "type": "registry:component",
  "title": "Email Form",
  "description": "A simple email form component",
  "registryDependencies": [
    "motion/react",
    "clsx",
    "sonner",
    "tabler-icons-react"
  ],
  "files": [
    {
      "path": "registry/default/components/email-form/email-form.tsx",
      "content": "\"use client\";\n\nimport { useRef, useState, useEffect, KeyboardEvent } from \"react\";\nimport { IconLoader, IconMail, IconSend, IconX } from \"@tabler/icons-react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport { toast } from \"sonner\";\n\nconst EmailForm = () => {\n  const [open, setOpen] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Close on ESC key\n  useEffect(() => {\n    const onKeyDown = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") setOpen(false);\n    };\n    if (open) document.addEventListener(\"keydown\", onKeyDown as any);\n    return () => document.removeEventListener(\"keydown\", onKeyDown as any);\n  }, [open]);\n\n  const validateEmail = (val: string) =>\n    /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(val.trim());\n\n  const handleSubmit = async () => {\n    if (!validateEmail(email)) {\n      toast.error(\"Please enter a valid email\");\n      inputRef.current?.focus();\n      return;\n    }\n\n    setIsSubmitting(true);\n    try {\n      const res = await fetch(\"/api/newsletter\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ email }),\n      });\n\n      if (!res.ok) throw new Error(\"Failed request\");\n\n      toast.success(\"Thanks! You'll hear from me soon.\");\n      setEmail(\"\");\n      setOpen(false);\n    } catch {\n      toast.error(\"Something went wrong. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  return (\n    <AnimatePresence mode=\"popLayout\">\n      {open ? (\n        <motion.div\n          layoutId=\"emailForm\"\n          initial={{ opacity: 0, scale: 0.96 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.96 }}\n          transition={{ type: \"spring\", stiffness: 320, damping: 26 }}\n          className=\"flex w-full max-w-md flex-col gap-4 rounded-lg border border-neutral-200 bg-white p-4 shadow-md dark:border-neutral-800 dark:bg-neutral-900\"\n        >\n          <div className=\"flex items-center justify-between\">\n            <motion.h3\n              layoutId=\"drop\"\n              className=\"text-sm font-medium tracking-tight\"\n            >\n              Drop your Email\n            </motion.h3>\n            <div className=\"flex items-center gap-2\">\n              <p className=\"text-xs text-neutral-500\">\n                Iâ€™ll get back to you soon.\n              </p>\n              <button\n                aria-label=\"Close email form\"\n                onClick={() => setOpen(false)}\n                className=\"rounded p-1 text-neutral-500 hover:text-black focus:ring-2 focus:ring-neutral-400 focus:outline-none dark:hover:text-white\"\n              >\n                <IconX className=\"h-4 w-4\" />\n              </button>\n            </div>\n          </div>\n\n          <div className=\"flex gap-2\">\n            <input\n              ref={inputRef}\n              type=\"email\"\n              required\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              onKeyDown={handleKeyPress}\n              placeholder=\"you@example.com\"\n              aria-label=\"Your email address\"\n              className=\"flex-1 rounded-md border border-neutral-300 bg-white px-3 py-2 text-sm focus:border-black focus:ring-2 focus:ring-black focus:outline-none dark:border-neutral-700 dark:bg-neutral-800 dark:focus:border-white dark:focus:ring-white\"\n            />\n            <motion.button\n              layout\n              ref={buttonRef}\n              onClick={handleSubmit}\n              disabled={isSubmitting}\n              whileHover={{ scale: 1.02 }}\n              whileTap={{ scale: 0.98 }}\n              className=\"flex items-center gap-1 rounded-md bg-black px-3 py-2 text-sm text-white hover:bg-neutral-800 disabled:opacity-50 dark:bg-white dark:text-black dark:hover:bg-neutral-200\"\n            >\n              <AnimatePresence mode=\"popLayout\" initial={false}>\n                {isSubmitting ? (\n                  <motion.div\n                    key=\"loading\"\n                    className=\"flex items-center gap-1\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                  >\n                    <motion.span\n                      animate={{ rotate: 360 }}\n                      transition={{\n                        repeat: Infinity,\n                        duration: 1,\n                        ease: \"linear\",\n                      }}\n                    >\n                      <IconLoader size={14} />\n                    </motion.span>\n                    Sending...\n                  </motion.div>\n                ) : (\n                  <motion.div\n                    key=\"send\"\n                    className=\"flex items-center gap-1\"\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                  >\n                    <IconSend className=\"h-4 w-4\" />\n                    Send\n                  </motion.div>\n                )}\n              </AnimatePresence>\n            </motion.button>\n          </div>\n        </motion.div>\n      ) : (\n        <motion.button\n          layoutId=\"emailForm\"\n          initial={{ opacity: 0, scale: 0.9 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: 0.9 }}\n          transition={{ type: \"spring\", stiffness: 320, damping: 26 }}\n          onClick={() => {\n            setOpen(true);\n            setTimeout(() => inputRef.current?.focus(), 100);\n          }}\n          className=\"flex items-center justify-center gap-2 rounded-lg border border-black/5 bg-white px-3 py-2 shadow hover:bg-neutral-100 focus:ring-2 focus:ring-black focus:outline-none dark:bg-neutral-800 dark:hover:bg-neutral-700 dark:focus:ring-white\"\n        >\n          <motion.span layoutId=\"drop\" className=\"text-sm\">\n            Drop your Email\n          </motion.span>\n          <IconMail className=\"h-4 w-4\" />\n        </motion.button>\n      )}\n    </AnimatePresence>\n  );\n};\n\nexport default EmailForm;\n",
      "type": "registry:component"
    }
  ]
}