{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "image-gallery",
  "type": "registry:component",
  "title": "Image Gallery",
  "description": "A simple image gallery component",
  "registryDependencies": [
    "motion/react",
    "clsx",
    "tabler-icons-react"
  ],
  "files": [
    {
      "path": "registry/default/components/image-gallery/image-gallery.tsx",
      "content": "\"use client\";\n\nimport {\n  createContext,\n  useContext,\n  useState,\n  useCallback,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { motion, AnimatePresence } from \"motion/react\";\nimport Image from \"next/image\";\nimport { ChevronLeft, ChevronRight, X } from \"lucide-react\";\n\n// ----------------------\n// Context\n// ----------------------\ninterface GalleryContextProps {\n  images: string[];\n  title?: string;\n  index: number | null;\n  setIndex: (i: number | null) => void;\n  next: () => void;\n  prev: () => void;\n}\nconst GalleryContext = createContext<GalleryContextProps | null>(null);\n\nexport function useGallery() {\n  const ctx = useContext(GalleryContext);\n  if (!ctx) throw new Error(\"Gallery.* must be used inside <GalleryRoot>\");\n  return ctx;\n}\n\n// ----------------------\n// Root Provider\n// ----------------------\nexport function GalleryRoot({\n  images,\n  title,\n  children,\n}: {\n  images: string[];\n  title?: string;\n  children: React.ReactNode;\n}) {\n  const [index, setIndex] = useState<number | null>(null);\n  const stripRef = useRef<HTMLDivElement>(null);\n\n  const next = useCallback(\n    () => setIndex((i) => (i === null ? 0 : (i + 1) % images.length)),\n    [images.length],\n  );\n  const prev = useCallback(\n    () =>\n      setIndex((i) =>\n        i === null ? 0 : (i - 1 + images.length) % images.length,\n      ),\n    [images.length],\n  );\n\n  // keyboard support\n  useEffect(() => {\n    if (index === null) return;\n    const handler = (e: KeyboardEvent) => {\n      if (e.key === \"Escape\") setIndex(null);\n      if (e.key === \"ArrowRight\") next();\n      if (e.key === \"ArrowLeft\") prev();\n    };\n    window.addEventListener(\"keydown\", handler);\n    return () => window.removeEventListener(\"keydown\", handler);\n  }, [index, next, prev]);\n\n  return (\n    <GalleryContext.Provider\n      value={{ images, title, index, setIndex, next, prev }}\n    >\n      {children}\n      <AnimatePresence>\n        {index !== null && <GalleryViewer stripRef={stripRef} />}\n      </AnimatePresence>\n    </GalleryContext.Provider>\n  );\n}\n\n// ----------------------\n// Grid\n// ----------------------\nexport function GalleryGrid() {\n  const { images, title, setIndex } = useGallery();\n  return (\n    <div className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\n      {images.map((src, i) => (\n        <motion.div\n          key={i}\n          layoutId={`img-${i}`}\n          whileHover={{ scale: 1.03 }}\n          transition={{ type: \"spring\", stiffness: 250, damping: 20 }}\n          className=\"group cursor-pointer\"\n          onClick={() => setIndex(i)}\n        >\n          <div className=\"bg-muted relative aspect-video overflow-hidden rounded-xl shadow-md ring-1 ring-black/5\">\n            <Image\n              src={src}\n              alt={`${title ?? \"image\"} ${i + 1}`}\n              fill\n              className=\"object-cover transition-transform duration-500 group-hover:scale-105\"\n              sizes=\"(max-width: 640px) 100vw, (max-width: 1024px) 50vw, 33vw\"\n            />\n          </div>\n        </motion.div>\n      ))}\n    </div>\n  );\n}\n\n// ----------------------\n// Viewer\n// ----------------------\nexport function GalleryViewer({\n  stripRef,\n}: {\n  stripRef: React.RefObject<HTMLDivElement | null>;\n}) {\n  const { index, setIndex, images, next, prev } = useGallery();\n  const [firstOpen, setFirstOpen] = useState(true);\n\n  if (index === null) return null;\n\n  return (\n    <motion.div\n      className=\"fixed inset-0 z-50 flex flex-col bg-black/80 backdrop-blur-lg\"\n      role=\"dialog\"\n      aria-modal=\"true\"\n      aria-label=\"Image viewer\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      {/* Titlebar */}\n      <div className=\"flex items-center justify-between border-b border-white/10 bg-black/40 px-4 py-2\">\n        <span className=\"text-xs text-white/70\">\n          {index + 1} / {images.length}\n        </span>\n        <button\n          aria-label=\"Close\"\n          onClick={() => setIndex(null)}\n          className=\"rounded-full bg-white/10 p-2 text-white hover:bg-white/20\"\n        >\n          <X className=\"h-4 w-4\" />\n        </button>\n      </div>\n\n      {/* Main image */}\n      <div className=\"relative flex flex-1 items-center justify-center\">\n        {firstOpen ? (\n          <motion.div\n            key={images[index]}\n            layoutId={`img-${index}`}\n            className=\"relative aspect-video w-full max-w-5xl overflow-hidden rounded-xl\"\n            initial={{ opacity: 0.8, scale: 0.95 }}\n            animate={{ opacity: 1, scale: 1 }}\n            transition={{ type: \"spring\", stiffness: 180, damping: 20 }}\n            onAnimationComplete={() => setFirstOpen(false)}\n          >\n            <Image\n              src={images[index]}\n              alt={`Image ${index + 1}`}\n              fill\n              className=\"object-cover\"\n              priority\n            />\n          </motion.div>\n        ) : (\n          <motion.div\n            key={images[index]}\n            className=\"relative aspect-video w-full max-w-5xl overflow-hidden rounded-xl\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            transition={{ duration: 0.3 }}\n          >\n            <Image\n              src={images[index]}\n              alt={`Image ${index + 1}`}\n              fill\n              className=\"object-cover\"\n              priority\n            />\n          </motion.div>\n        )}\n        <GalleryNavButton dir=\"left\" onClick={prev} />\n        <GalleryNavButton dir=\"right\" onClick={next} />\n      </div>\n\n      {/* Thumbnails */}\n      <GalleryThumbnailStrip stripRef={stripRef} />\n    </motion.div>\n  );\n}\n\n// ----------------------\n// NavButton\n// ----------------------\nexport function GalleryNavButton({\n  dir,\n  onClick,\n}: {\n  dir: \"left\" | \"right\";\n  onClick: () => void;\n}) {\n  const Icon = dir === \"left\" ? ChevronLeft : ChevronRight;\n  const pos = dir === \"left\" ? \"left-4\" : \"right-4\";\n  return (\n    <button\n      aria-label={dir === \"left\" ? \"Previous\" : \"Next\"}\n      onClick={onClick}\n      className={`absolute top-1/2 ${pos} -translate-y-1/2 rounded-full bg-white/10 p-3 text-white ring-1 ring-white/20 backdrop-blur-sm transition-colors hover:bg-white/20`}\n    >\n      <Icon className=\"h-6 w-6\" />\n    </button>\n  );\n}\n\n// ----------------------\n// Thumbnail Strip\n// ----------------------\nexport function GalleryThumbnailStrip({\n  stripRef,\n}: {\n  stripRef: React.RefObject<HTMLDivElement | null>;\n}) {\n  const { images, index, setIndex } = useGallery();\n\n  useEffect(() => {\n    if (index === null || !stripRef.current) return;\n    const el = stripRef.current.children[index] as HTMLElement | undefined;\n    el?.scrollIntoView({\n      behavior: \"smooth\",\n      inline: \"center\",\n      block: \"nearest\",\n    });\n  }, [index, stripRef]);\n\n  return (\n    <div className=\"border-t border-white/10 px-4 py-2\">\n      <div\n        ref={stripRef}\n        className=\"scrollbar-hide flex snap-x snap-mandatory justify-center gap-3 overflow-x-auto py-2\"\n        style={{ scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}\n      >\n        {images.map((src, i) => {\n          const isActive = index === i;\n          return (\n            <button\n              key={i}\n              onClick={() => setIndex(i)}\n              className=\"relative h-20 w-28 flex-shrink-0 snap-center rounded-xl transition-all duration-300\"\n              aria-label={`Show image ${i + 1}`}\n            >\n              <div className=\"relative h-full w-full overflow-hidden rounded-xl\">\n                <Image\n                  src={src}\n                  alt={`Thumbnail ${i + 1}`}\n                  fill\n                  className=\"z-20 object-cover\"\n                  sizes=\"112px\"\n                />\n              </div>\n              {isActive && (\n                <motion.div\n                  layoutId=\"active-thumb\"\n                  className=\"pointer-events-none absolute -inset-1 z-10 rounded-2xl bg-white\"\n                />\n              )}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}