{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "flow-form",
  "type": "registry:component",
  "title": "Flow Form",
  "description": "A simple flow form component",
  "files": [
    {
      "path": "registry/default/components/flow-form/flow-form.tsx",
      "content": "\"use client\";\n\nimport { useState, useMemo } from \"react\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { motion } from \"motion/react\";\nimport { toast } from \"sonner\";\nimport { IconCircleCheck, IconLoader2, IconSend } from \"@tabler/icons-react\";\n\n// ----------------------\n// Schema\n// ----------------------\nconst formSchema = z.object({\n  name: z.string().min(2, { message: \"Name must be at least 2 characters.\" }),\n  email: z.string().email({ message: \"Please enter a valid email address.\" }),\n  subject: z\n    .string()\n    .min(5, { message: \"Subject must be at least 5 characters.\" }),\n  message: z\n    .string()\n    .min(10, { message: \"Message must be at least 10 characters.\" }),\n});\ntype FormValues = z.infer<typeof formSchema>;\n\n// ----------------------\n// Reusable Input Field\n// ----------------------\nconst AnimatedFormField = ({\n  name,\n  label,\n  placeholder,\n  control,\n  component: Component = \"input\",\n  rows,\n}: {\n  name: keyof FormValues;\n  label: string;\n  placeholder: string;\n  control: any;\n  component?: \"input\" | \"textarea\";\n  rows?: number;\n}) => {\n  const [focused, setFocused] = useState(false);\n\n  const inputVariants = {\n    focused: {\n      scale: 1.01,\n      boxShadow: \"0 0 0 2px rgba(var(--primary-rgb), 0.25)\",\n    },\n    unfocused: { scale: 1, boxShadow: \"none\" },\n  };\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      render={({ field, fieldState, formState }) => (\n        <div className=\"flex flex-col space-y-1\">\n          <label\n            htmlFor={name}\n            className=\"flex items-center text-sm font-medium text-neutral-700 dark:text-neutral-300\"\n          >\n            {label}\n            {formState.dirtyFields[name] && !fieldState.error && (\n              <IconCircleCheck className=\"ml-2 h-3 w-3 text-green-500\" />\n            )}\n          </label>\n          <motion.div\n            variants={inputVariants}\n            animate={focused ? \"focused\" : \"unfocused\"}\n          >\n            {Component === \"textarea\" ? (\n              <textarea\n                {...field}\n                id={name}\n                rows={rows}\n                placeholder={placeholder}\n                aria-invalid={!!fieldState.error}\n                aria-describedby={`${name}-error`}\n                className=\"focus:border-primary w-full rounded-md border border-neutral-300 bg-white px-3 py-2 text-sm text-neutral-900 shadow-sm transition-all duration-200 outline-none dark:border-neutral-600 dark:bg-neutral-800 dark:text-neutral-100\"\n                onFocus={() => setFocused(true)}\n                onBlur={() => setFocused(false)}\n              />\n            ) : (\n              <input\n                {...field}\n                id={name}\n                type=\"text\"\n                placeholder={placeholder}\n                aria-invalid={!!fieldState.error}\n                aria-describedby={`${name}-error`}\n                className=\"focus:border-primary w-full rounded-md border border-neutral-300 bg-white px-3 py-2 text-sm text-neutral-900 shadow-sm transition-all duration-200 outline-none dark:border-neutral-600 dark:bg-neutral-800 dark:text-neutral-100\"\n                onFocus={() => setFocused(true)}\n                onBlur={() => setFocused(false)}\n              />\n            )}\n          </motion.div>\n          {fieldState.error && (\n            <span id={`${name}-error`} className=\"text-xs text-red-500\">\n              {fieldState.error.message}\n            </span>\n          )}\n          {name === \"message\" &&\n            formState.dirtyFields.message &&\n            field.value && (\n              <div className=\"mt-1 flex justify-end\">\n                <span\n                  className={`text-xs ${\n                    field.value.length < 10\n                      ? \"text-red-500\"\n                      : \"text-neutral-500 dark:text-neutral-400\"\n                  }`}\n                >\n                  {field.value.length} / 10+ characters\n                </span>\n              </div>\n            )}\n        </div>\n      )}\n    />\n  );\n};\n\n// ----------------------\n// Main Contact Form\n// ----------------------\nexport default function FlowForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const form = useForm<FormValues>({\n    resolver: zodResolver(formSchema),\n    mode: \"onChange\",\n    defaultValues: { name: \"\", email: \"\", subject: \"\", message: \"\" },\n  });\n\n  // progress bar calc\n  const formProgress = useMemo(() => {\n    const { name, email, subject, message } = form.getValues();\n    const valid = [\n      name.length >= 2,\n      /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email),\n      subject.length >= 5,\n      message.length >= 10,\n    ];\n    return (valid.filter(Boolean).length / valid.length) * 100;\n  }, [form.watch()]);\n\n  const onSubmit = async (data: FormValues) => {\n    setIsSubmitting(true);\n    try {\n      // Simulate now\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n\n      //   const res = await fetch(\"/api/send\", {\n      //     method: \"POST\",\n      //     headers: { \"Content-Type\": \"application/json\" },\n      //     body: JSON.stringify(data),\n      //   });\n\n      //   if (!res.ok) throw new Error(\"Failed request\");\n      toast.success(\"Message sent successfully\");\n      form.reset();\n    } catch {\n      toast.error(\"Failed to send message\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <form\n      onSubmit={form.handleSubmit(onSubmit)}\n      className=\"m-2 mx-auto max-w-xl space-y-6 rounded-xl border bg-neutral-50 p-4 dark:bg-neutral-950\"\n    >\n      {/* Progress bar */}\n      <div className=\"mb-6 h-1 w-full overflow-hidden rounded bg-neutral-200 dark:bg-neutral-700\">\n        <motion.div\n          className=\"bg-primary h-full\"\n          animate={{ width: `${formProgress}%` }}\n          transition={{ duration: 0.3 }}\n        />\n      </div>\n\n      {/* Fields */}\n      <div className=\"grid grid-cols-1 gap-6 sm:grid-cols-2\">\n        <AnimatedFormField\n          name=\"name\"\n          label=\"Your Name\"\n          placeholder=\"John Doe\"\n          control={form.control}\n        />\n        <AnimatedFormField\n          name=\"email\"\n          label=\"Your Email\"\n          placeholder=\"john@example.com\"\n          control={form.control}\n        />\n      </div>\n      <AnimatedFormField\n        name=\"subject\"\n        label=\"Subject\"\n        placeholder=\"Project Inquiry\"\n        control={form.control}\n      />\n      <AnimatedFormField\n        name=\"message\"\n        label=\"Message\"\n        placeholder=\"Tell me about your project...\"\n        control={form.control}\n        component=\"textarea\"\n        rows={5}\n      />\n\n      {/* Submit */}\n      <motion.div whileHover={{ scale: formProgress === 100 ? 1.02 : 1 }}>\n        <button\n          type=\"submit\"\n          aria-label={isSubmitting ? \"Sending message\" : \"Send message\"}\n          disabled={isSubmitting || formProgress !== 100}\n          className={`relative flex w-full items-center justify-center rounded-md px-4 py-2 font-medium text-white shadow transition-all dark:text-black ${\n            formProgress === 100\n              ? \"hover:bg-primary/90 bg-black dark:bg-white\"\n              : \"cursor-not-allowed bg-black/70 dark:bg-white/70 dark:text-black\"\n          }`}\n        >\n          {isSubmitting ? (\n            <>\n              <IconLoader2 className=\"mr-2 h-4 w-4 animate-spin\" /> Sending...\n            </>\n          ) : (\n            <>\n              <IconSend className=\"mr-2 h-4 w-4\" /> Send Message\n            </>\n          )}\n        </button>\n      </motion.div>\n    </form>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}