{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "contact-form",
  "type": "registry:component",
  "title": "Contact Form",
  "description": "A simple contact form component",
  "files": [
    {
      "path": "registry/default/components/contact-form/contact-form.tsx",
      "content": "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion, AnimatePresence, Variants } from \"motion/react\";\nimport { toast } from \"sonner\";\nimport { cn } from \"@/lib/utils\";\n\n// ------------------\n// Context & Provider\n// ------------------\ninterface ContactContextProps {\n  formData: Record<string, string>;\n  setFormData: React.Dispatch<React.SetStateAction<Record<string, string>>>;\n  errors: Record<string, string>;\n  setErrors: React.Dispatch<React.SetStateAction<Record<string, string>>>;\n  isSubmitting: boolean;\n  handleBlur: (field: string) => void;\n  validateField: (name: string, value: string) => string;\n  isFocused: string | null;\n  setIsFocused: React.Dispatch<React.SetStateAction<string | null>>;\n}\n\nconst ContactContext = React.createContext<ContactContextProps | null>(null);\nconst useContactForm = () => {\n  const ctx = React.useContext(ContactContext);\n  if (!ctx)\n    throw new Error(\n      \"Contact form components must be used inside <ContactForm />\",\n    );\n  return ctx;\n};\n\n// ------------------\n// Variants\n// ------------------\nconst labelVariants = {\n  default: { y: 30, x: 6, scale: 1 },\n  focused: { y: -2, x: 0, scale: 0.85 },\n};\n\nconst errorVariants: Variants = {\n  hidden: { opacity: 0, y: -8, height: 0 },\n  visible: { opacity: 1, y: 0, height: 1, transition: { duration: 0.3 } },\n  exit: { opacity: 0, y: -8, height: 0, transition: { duration: 0.2 } },\n};\n\nconst buttonVariants: Variants = {\n  idle: { scale: 1 },\n  hover: { scale: 1.02 },\n  tap: { scale: 0.98 },\n  loading: { scale: 1 },\n};\n\nconst spinnerVariants: Variants = {\n  spin: {\n    rotate: 360,\n    transition: { duration: 1, repeat: Infinity, ease: \"linear\" },\n  },\n};\n\n// ------------------\n// Main Form Provider\n// ------------------\nexport function ContactForm({\n  children,\n  className = \"\",\n  onSubmit,\n}: {\n  children: React.ReactNode;\n  className?: string;\n  onSubmit?: (\n    data: Record<string, string>,\n  ) => Promise<{ success: boolean; message?: string }>;\n}) {\n  const [isFocused, setIsFocused] = useState<string | null>(null);\n  const [formData, setFormData] = useState<Record<string, string>>({});\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const validateField = (name: string, value: string) => {\n    if (!value?.trim()) return `${name} is required`;\n    if (name === \"email\" && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value))\n      return \"Enter a valid email\";\n    return \"\";\n  };\n\n  const handleBlur = (field: string) => {\n    setIsFocused(null);\n    const error = validateField(field, formData[field]);\n    if (error) setErrors((prev) => ({ ...prev, [field]: error }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const newErrors: Record<string, string> = {};\n    Object.keys(formData).forEach((key) => {\n      const error = validateField(key, formData[key]);\n      if (error) newErrors[key] = error;\n    });\n    setErrors(newErrors);\n    if (Object.keys(newErrors).length > 0) return;\n\n    setIsSubmitting(true);\n    try {\n      const response = onSubmit\n        ? await onSubmit(formData)\n        : { success: true, message: \"Message sent successfully\" };\n      if (response.success) {\n        toast.success(response.message || \"Message sent successfully!\");\n        setFormData({});\n        setErrors({});\n      } else {\n        toast.error(response.message || \"Something went wrong.\");\n      }\n    } catch {\n      toast.error(\"Failed to send message. Please try again.\");\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <ContactContext.Provider\n      value={{\n        formData,\n        setFormData,\n        errors,\n        setErrors,\n        isSubmitting,\n        handleBlur,\n        validateField,\n        isFocused,\n        setIsFocused,\n      }}\n    >\n      <motion.form\n        onSubmit={handleSubmit}\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        className={cn(\n          \"mx-auto max-w-2xl space-y-2 rounded-md border bg-neutral-50 p-4 dark:bg-neutral-900\",\n          className,\n        )}\n      >\n        {children}\n      </motion.form>\n    </ContactContext.Provider>\n  );\n}\n\n// ------------------\n// Input Field\n// ------------------\nexport function ContactField({\n  name,\n  type = \"text\",\n  label,\n  placeholder = \"\",\n  className = \"\",\n}: {\n  name: string;\n  type?: string;\n  label: string;\n  placeholder?: string;\n  className?: string;\n}) {\n  const {\n    formData,\n    setFormData,\n    errors,\n    isSubmitting,\n    handleBlur,\n    isFocused,\n    setIsFocused,\n  } = useContactForm();\n  const shouldFloat = isFocused === name || formData[name]?.length > 0;\n\n  return (\n    <div className=\"relative\">\n      <motion.label\n        htmlFor={name}\n        variants={labelVariants}\n        animate={shouldFloat ? \"focused\" : \"default\"}\n        transition={{ duration: 0.3 }}\n        className={`pointer-events-none absolute text-sm font-medium ${\n          errors[name]\n            ? \"text-red-500\"\n            : shouldFloat\n              ? \"text-primary\"\n              : \"text-neutral-500\"\n        }`}\n      >\n        {label}\n      </motion.label>\n      <motion.input\n        id={name}\n        name={name}\n        type={type}\n        placeholder={placeholder}\n        value={formData[name] || \"\"}\n        disabled={isSubmitting}\n        onFocus={() => setIsFocused(name)}\n        onBlur={() => handleBlur(name)}\n        onChange={(e) =>\n          setFormData((prev) => ({ ...prev, [name]: e.target.value }))\n        }\n        whileFocus={{ scale: 1.01 }}\n        className={cn(\n          \"mt-6 w-full rounded-md border bg-white px-4 py-1 dark:bg-neutral-800\",\n          {\n            \"border-red-500 focus:ring-red-500\": errors[name],\n            \"focus:ring-primary border-neutral-200 dark:border-neutral-700\":\n              !errors[name],\n            className,\n          },\n        )}\n      />\n      <AnimatePresence>\n        {errors[name] && (\n          <motion.p\n            variants={errorVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            className=\"mt-1 text-sm text-red-500\"\n          >\n            {errors[name]}\n          </motion.p>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// ------------------\n// Textarea Field\n// ------------------\nexport function ContactTextArea({\n  name,\n  label,\n  placeholder = \"\",\n  className = \"\",\n}: {\n  name: string;\n  label: string;\n  placeholder?: string;\n  className?: string;\n}) {\n  const {\n    formData,\n    setFormData,\n    errors,\n    isSubmitting,\n    handleBlur,\n    isFocused,\n    setIsFocused,\n  } = useContactForm();\n  const shouldFloat = isFocused === name || formData[name]?.length > 0;\n\n  return (\n    <div className=\"relative\">\n      <motion.label\n        htmlFor={name}\n        variants={labelVariants}\n        animate={shouldFloat ? \"focused\" : \"default\"}\n        className={`pointer-events-none absolute text-sm font-medium ${\n          errors[name]\n            ? \"text-red-500\"\n            : shouldFloat\n              ? \"text-primary\"\n              : \"text-neutral-500\"\n        }`}\n      >\n        {label}\n      </motion.label>\n      <motion.textarea\n        id={name}\n        name={name}\n        placeholder={placeholder}\n        rows={4}\n        value={formData[name] || \"\"}\n        disabled={isSubmitting}\n        onFocus={() => setIsFocused(name)}\n        onBlur={() => handleBlur(name)}\n        onChange={(e) =>\n          setFormData((prev) => ({ ...prev, [name]: e.target.value }))\n        }\n        className={cn(\n          \"resize-vertical mt-6 w-full overflow-hidden rounded-lg border bg-white px-4 py-3 dark:bg-neutral-800\",\n          {\n            \"border-red-500 focus:ring-red-500\": errors[name],\n            \"focus:ring-primary border-neutral-200 dark:border-neutral-700\":\n              !errors[name],\n            className,\n          },\n        )}\n      />\n      <AnimatePresence>\n        {errors[name] && (\n          <motion.p\n            variants={errorVariants}\n            initial=\"hidden\"\n            animate=\"visible\"\n            exit=\"exit\"\n            className=\"mt-px text-sm text-red-500\"\n          >\n            {errors[name]}\n          </motion.p>\n        )}\n      </AnimatePresence>\n    </div>\n  );\n}\n\n// ------------------\n// Submit Button\n// ------------------\nexport function ContactSubmit({\n  children,\n  className = \"\",\n}: {\n  children: React.ReactNode;\n  className?: string;\n}) {\n  const { isSubmitting } = useContactForm();\n  return (\n    <motion.button\n      type=\"submit\"\n      disabled={isSubmitting}\n      variants={buttonVariants}\n      initial=\"idle\"\n      whileHover={!isSubmitting ? \"hover\" : \"loading\"}\n      whileTap={!isSubmitting ? \"tap\" : \"loading\"}\n      className={cn(\n        \"mt-2 w-full rounded-lg px-6 py-3 text-sm font-medium text-white dark:text-black\",\n        {\n          \"cursor-not-allowed bg-neutral-400\": isSubmitting,\n          \"bg-black hover:bg-black/90 dark:bg-white dark:hover:bg-white/90\":\n            !isSubmitting,\n          className,\n        },\n      )}\n    >\n      <AnimatePresence mode=\"wait\">\n        {isSubmitting ? (\n          <motion.span\n            key=\"loading\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n            className=\"flex items-center justify-center\"\n          >\n            <motion.div\n              variants={spinnerVariants}\n              animate=\"spin\"\n              className=\"mr-3 h-5 w-5 rounded-full border-2 border-transparent border-t-white\"\n            />\n            Sending...\n          </motion.span>\n        ) : (\n          <motion.span\n            key=\"idle\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            {children}\n          </motion.span>\n        )}\n      </AnimatePresence>\n    </motion.button>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}