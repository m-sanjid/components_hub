{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "command-pill",
  "type": "registry:component",
  "title": "Command Pill",
  "description": "A simple command palette component",
  "files": [
    {
      "path": "registry/default/components/command-pill/command-pill.tsx",
      "content": "\"use client\";\n\nimport { useState, useEffect, useCallback, useRef } from \"react\";\nimport { motion, AnimatePresence, LayoutGroup } from \"motion/react\";\nimport { Search, X } from \"lucide-react\";\n\nexport interface Command {\n  id: string;\n  title: string;\n  description?: string;\n  icon?: React.ComponentType<{ className?: string }>;\n  shortcut?: string;\n  action: () => void;\n}\n\ninterface CommandPaletteProps {\n  commands: Command[];\n  placeholder?: string;\n  onClose?: () => void;\n  className?: string;\n}\n\nexport function CommandPalette({\n  commands,\n  placeholder = \"Type a command...\",\n  onClose,\n  className = \"\",\n}: CommandPaletteProps) {\n  const [isOpen, setIsOpen] = useState(false);\n  const [search, setSearch] = useState(\"\");\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const itemRefs = useRef<(HTMLButtonElement | null)[]>([]);\n\n  const filteredCommands = commands.filter((cmd) =>\n    cmd.title.toLowerCase().includes(search.toLowerCase()),\n  );\n\n  const closePalette = () => {\n    setIsOpen(false);\n    setSearch(\"\");\n    setSelectedIndex(0);\n    onClose?.();\n  };\n\n  const handleKeyDown = useCallback(\n    (e: KeyboardEvent) => {\n      if (e.key === \"j\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setIsOpen((prev) => !prev);\n        return;\n      }\n      if (!isOpen) return;\n\n      if (e.key === \"Escape\") closePalette();\n\n      if (e.key === \"ArrowDown\") {\n        e.preventDefault();\n        setSelectedIndex((prev) =>\n          prev < filteredCommands.length - 1 ? prev + 1 : 0,\n        );\n      }\n\n      if (e.key === \"ArrowUp\") {\n        e.preventDefault();\n        setSelectedIndex((prev) =>\n          prev > 0 ? prev - 1 : filteredCommands.length - 1,\n        );\n      }\n\n      if (e.key === \"Enter\" && filteredCommands[selectedIndex]) {\n        e.preventDefault();\n        filteredCommands[selectedIndex].action();\n        closePalette();\n      }\n    },\n    [isOpen, filteredCommands, selectedIndex],\n  );\n\n  // Scroll selected item into view\n  useEffect(() => {\n    const el = itemRefs.current[selectedIndex];\n    if (el && containerRef.current) {\n      el.scrollIntoView({ block: \"nearest\", behavior: \"smooth\" });\n    }\n  }, [selectedIndex]);\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeyDown);\n    document.body.style.overflow = isOpen ? \"hidden\" : \"\";\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n      document.body.style.overflow = \"\";\n    };\n  }, [handleKeyDown, isOpen]);\n\n  return (\n    <LayoutGroup>\n      {/* Compact trigger pill */}\n      <motion.div\n        layoutId=\"command-palette\"\n        onClick={() => setIsOpen(true)}\n        className=\"fixed top-4 left-1/2 z-50 flex h-10 w-48 -translate-x-1/2 cursor-pointer items-center gap-2 rounded-full border border-neutral-300 bg-white px-4 shadow-md dark:border-neutral-700 dark:bg-neutral-900\"\n      >\n        <motion.div layoutId=\"searchIcon\">\n          <Search className=\"h-4 w-4 text-neutral-500\" />\n        </motion.div>\n        <motion.span\n          layoutId=\"placeholder\"\n          className=\"text-sm text-neutral-600 dark:text-neutral-300\"\n        >\n          Search...\n        </motion.span>\n        <motion.kbd\n          layoutId=\"shortcut\"\n          initial={{ opacity: 0, scale: 0.97, filter: \"blur(5px)\" }}\n          animate={{ opacity: 1, scale: 1, filter: \"blur(0px)\" }}\n          exit={{ opacity: 0, scale: 0.97, filter: \"blur(5px)\" }}\n          transition={{ duration: 0.2, ease: \"easeInOut\" }}\n          className=\"ml-auto rounded bg-neutral-200 px-2 py-0.5 text-xs dark:bg-neutral-700\"\n        >\n          âŒ˜ J\n        </motion.kbd>\n      </motion.div>\n\n      {/* Palette overlay */}\n      <AnimatePresence>\n        {isOpen && (\n          <motion.div\n            key=\"command-palette-wrapper\"\n            className=\"fixed inset-0 z-[60] flex items-start justify-center\"\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            exit={{ opacity: 0 }}\n          >\n            {/* Backdrop */}\n            <motion.div\n              className=\"absolute inset-0 bg-black/40 backdrop-blur-sm\"\n              onClick={closePalette}\n            />\n\n            {/* Expanded Palette */}\n            <motion.div\n              layoutId=\"command-palette\"\n              transition={{ type: \"spring\", damping: 24, stiffness: 260 }}\n              className={`relative top-20 w-full max-w-xl rounded-2xl border bg-white shadow-2xl dark:border-neutral-700 dark:bg-neutral-900 ${className}`}\n            >\n              {/* Input */}\n              <div className=\"flex items-center gap-2 border-b border-neutral-200 p-4 dark:border-neutral-700\">\n                <motion.div layoutId=\"searchIcon\">\n                  <Search className=\"h-5 w-5 text-neutral-400\" />\n                </motion.div>\n                <motion.input\n                  layoutId=\"placeholder\"\n                  autoFocus\n                  value={search}\n                  onChange={(e) => {\n                    setSearch(e.target.value);\n                    setSelectedIndex(0);\n                  }}\n                  placeholder={placeholder}\n                  className=\"flex-1 bg-transparent text-sm text-neutral-900 outline-none placeholder:text-neutral-400 dark:text-white\"\n                />\n                <motion.button\n                  onClick={closePalette}\n                  className=\"rounded p-1 hover:bg-neutral-100 dark:hover:bg-neutral-800\"\n                >\n                  <X className=\"h-5 w-5 text-neutral-400\" />\n                </motion.button>\n              </div>\n\n              {/* Commands */}\n              <div\n                ref={containerRef}\n                className=\"max-h-80 overflow-y-auto scroll-smooth p-1\"\n              >\n                {filteredCommands.length === 0 ? (\n                  <div className=\"p-4 text-center text-sm text-neutral-500\">\n                    No results found\n                  </div>\n                ) : (\n                  filteredCommands.map((command, index) => {\n                    const isSelected = index === selectedIndex;\n                    return (\n                      <button\n                        key={command.id}\n                        ref={(el) => {\n                          if (el) itemRefs.current[index] = el;\n                        }}\n                        onClick={() => {\n                          command.action();\n                          closePalette();\n                        }}\n                        className={`flex w-full items-center gap-3 rounded-md px-4 py-2 text-sm transition-colors ${\n                          isSelected\n                            ? \"bg-neutral-100 dark:bg-neutral-800\"\n                            : \"hover:bg-neutral-50 dark:hover:bg-neutral-800/50\"\n                        }`}\n                      >\n                        {command.icon && (\n                          <command.icon className=\"h-5 w-5 text-neutral-400\" />\n                        )}\n                        <div className=\"flex-1 text-left\">\n                          <div className=\"font-medium text-neutral-900 dark:text-white\">\n                            {command.title}\n                          </div>\n                          {command.description && (\n                            <div className=\"text-xs text-neutral-500\">\n                              {command.description}\n                            </div>\n                          )}\n                        </div>\n                        {command.shortcut && (\n                          <kbd className=\"rounded border bg-neutral-100 px-2 py-0.5 text-xs dark:border-neutral-700 dark:bg-neutral-800\">\n                            {command.shortcut}\n                          </kbd>\n                        )}\n                      </button>\n                    );\n                  })\n                )}\n              </div>\n            </motion.div>\n          </motion.div>\n        )}\n      </AnimatePresence>\n    </LayoutGroup>\n  );\n}\n",
      "type": "registry:component"
    }
  ]
}